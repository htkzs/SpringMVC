SpringMVC和Spring整合的目的;
分工明确;
SpringMVC的配置文件就来配置和网站转发逻辑以及网站功能有关的(视图解析器，文件上传解析器，支持ajax，xox )
Spring的配置文件来配置和业务有关的（事务控制，数据源，xxx )

Spring的父子容器:
配置实战：

   父容器标准配置：application.xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          https://www.springframework.org/schema/context/spring-context.xsd">
       <!--使用Spring的容器作为父容器 用于处理业务的相关配置 包含事务控制，数据源等的控制等-->
       <context:component-scan base-package="com.atguigu">
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>
   </beans>

   子容器标准配置：springmvc.xml

   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
       <!--使用SpringMVC容器作为子容器 配置web相关组件 网站转发逻辑以及网站功能有关的(视图解析器，文件上传解析器，支持ajax等配置-->
          <context:component-scan base-package="com.atguigu.controller"/>

       <!--配置一个视图解析器-->
          <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver">
              <property name="prefix" value="/WEB-INF/pages/"/>
              <property name="suffix" value=".jsp"/>
          </bean>
          <!--会走视图解析器InternalResourceViewResolver 所以使用是需要和视图解析器同时使用-->
          <mvc:view-controller path="/ToLoginPage" view-name="login"/>
          <!--用于处理静态资源 直接将静态资源交给tomcat处理-->
          <mvc:default-servlet-handler/>
          <!--防止动态资源不能访问-->
          <mvc:annotation-driven/>
   </beans>

   web.xml作父子容器的隔离
   <?xml version="1.0" encoding="UTF-8"?>
   <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
            version="4.0">
     <display-name>Archetype Created Web Application</display-name>
     <!--使用listener开启一个父容器 称之为Spring容器-->
     <listener>
       <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
     </listener>
     <context-param>
       <param-name>contextConfigLocation</param-name>
       <param-value>classpath:application.xml</param-value>
     </context-param>
     <!--指定一个子容器通过 springmvc.xml-->
     <servlet>
       <servlet-name>springmvc</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>classpath:springmvc.xml</param-value>
       </init-param>
       <!--servlet启动加载，默认第一次访问创建，现在改为servlet容器时创建对象-->
       <load-on-startup>1</load-on-startup>
     </servlet>
     <servlet-mapping>
       <servlet-name>springmvc</servlet-name>
       <url-pattern>/</url-pattern>
     </servlet-mapping>
   </web-app>


